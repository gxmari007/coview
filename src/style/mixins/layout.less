/**
 * Layout mixin
 */

// 创建列
// 会根据 @layout-columns 创建相应数量的列 class
.make-columns() {
  .col(@index) {
    @item: ~".co-col-@{index}, .co-col-xs-@{index}, .co-col-sm-@{index}, .co-col-md-@{index}, .co-col-lg-@{index}";
    .col(@index + 1, @item);
  }

  .col(@index, @list) when (@index =< @layout-columns) {
    @item: ~".co-col-@{index}, .co-col-xs-@{index}, .co-col-sm-@{index}, .co-col-md-@{index}, .co-col-lg-@{index}";
    .col(@index + 1, ~"@{list}, @{item}");
  }

  .col(@index, @list) when (@index > @layout-columns) {
    @{list} {
      position: relative;
      display: block;
      float: left;
      min-height: 1px;
    }
  }

  .col(1);
}


// width
.calc-default-columns(@index, @type) when (@type = width) and (@index > 0) {
  .co-col-@{index} {
    width: percentage(@index / @layout-columns);
  }
}

.calc-columns(@index, @class, @type) when (@type = width) and (@index > 0) {
  .co-col-@{class}-@{index} {
    width: percentage(@index / @layout-columns);
  }
}


// order
.calc-default-columns(@index, @type) when (@type = order) and (@index > 0) {
  .co-col-@{type}-@{index} {
    order: @index;
  }
}


// offset
.calc-default-columns(@index, @type) when (@type = offset) {
  .co-col-offset-@{index} {
    margin-left: percentage(@index / @layout-columns);
  }
}

.calc-columns(@index, @class, @type) when (@type = offset) {
  .co-col-@{class}-offset-@{index} {
    margin-left: percentage(@index / @layout-columns);
  }
}


// push
.calc-default-columns(@index, @type) when (@type = push) and (@index > 0) {
  .co-col-push-@{index} {
    left: percentage(@index / @layout-columns);
  }
}

.calc-default-columns(@index, @type) when (@type = push) and (@index = 0) {
  .co-col-push-@{index} {
    left: auto;
  }
}

.calc-columns(@index, @class, @type) when (@type = push) and (@index > 0) {
  .co-col-@{class}-push-@{index} {
    left: percentage(@index / @layout-columns);
  }
}

.calc-columns(@index, @class, @type) when (@type = push) and (@index = 0) {
  .co-col-@{class}-push-@{index} {
    left: auto;
  }
}


// pull
.calc-default-columns(@index, @type) when (@type = pull) and (@index > 0) {
  .co-col-pull-@{index} {
    right: percentage(@index / @layout-columns);
  }
}

.calc-default-columns(@index, @type) when (@type = pull) and (@index = 0) {
  .co-col-pull-@{index} {
    right: auto;
  }
}

.calc-columns(@index, @class, @type) when (@type = pull) and (@index > 0) {
  .co-col-@{class}-pull-@{index} {
    right: percentage(@index / @layout-columns);
  }
}

.calc-columns(@index, @class, @type) when (@type = pull) and (@index = 0) {
  .co-col-@{class}-pull-@{index} {
    right: auto;
  }
}


// 设置所有列的样式
.loop-columns(@index, @class, @type) when (@index >= 0) {
  .calc-columns(@index, @class, @type);
  .loop-columns(@index - 1, @class, @type);
}

.loop-default-columns(@index, @type) when (@index >= 0) {
  .calc-default-columns(@index, @type);
  .loop-default-columns(@index - 1, @type);
}


// 构建布局
.make-default-grid() {
  .loop-default-columns(@layout-columns, order);
  .loop-default-columns(@layout-columns, width);
  .loop-default-columns(@layout-columns, offset);
  .loop-default-columns(@layout-columns, push);
  .loop-default-columns(@layout-columns, pull);
}

.make-grid(@class) {
  .loop-columns(@layout-columns, @class, width);
  .loop-columns(@layout-columns, @class, offset);
  .loop-columns(@layout-columns, @class, push);
  .loop-columns(@layout-columns, @class, pull);
}
